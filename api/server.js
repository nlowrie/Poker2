import express from 'express';
import cors from 'cors';
import { OpenAI } from 'openai';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Meeting summarization endpoint
app.post('/api/summarize-meeting', async (req, res) => {
  try {
    const { transcription, sessionId, participants } = req.body;

    if (!transcription || !transcription.trim()) {
      return res.status(400).json({ 
        error: 'Transcription is required',
        code: 'MISSING_TRANSCRIPTION'
      });
    }

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ 
        error: 'OpenAI API key not configured',
        code: 'MISSING_API_KEY'
      });
    }

    console.log(`ü§ñ Generating AI summary for session ${sessionId}`);
    console.log(`üìù Transcription length: ${transcription.length} characters`);
    console.log(`üë• Participants: ${participants?.join(', ') || 'Unknown'}`);

    // Create the AI prompt for meeting summarization
    const prompt = `Please analyze the following meeting transcription and provide a comprehensive summary in markdown format.

Meeting Details:
- Session ID: ${sessionId}
- Participants: ${participants?.join(', ') || 'Not specified'}
- Transcription Length: ${transcription.length} characters

Transcription:
${transcription}

Please provide a summary with the following sections:
1. **Meeting Overview** - Brief description of the meeting purpose and duration
2. **Key Discussion Points** - Main topics discussed (bullet points)
3. **Decisions Made** - Any concrete decisions or conclusions reached
4. **Action Items** - Specific tasks, assignments, or follow-ups identified
5. **Technical Details** - Any technical information, estimates, or specifications discussed
6. **Next Steps** - What needs to happen after this meeting

Format the response as clean markdown with proper headings and bullet points. Focus on actionable insights and key takeaways.`;    // Call OpenAI API
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are an expert meeting summarizer. Create concise, actionable meeting summaries that capture key decisions, action items, and important discussions. Focus on practical outcomes and next steps.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.3,
    });

    const summary = completion.choices[0]?.message?.content;

    if (!summary) {
      throw new Error('No summary generated by AI');
    }

    console.log(`‚úÖ AI summary generated successfully (${summary.length} characters)`);

    res.json({
      success: true,
      summary: summary,      metadata: {
        sessionId,
        participants,
        transcriptionLength: transcription.length,
        summaryLength: summary.length,
        model: 'gpt-4o',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Error generating meeting summary:', error);
    
    if (error.code === 'insufficient_quota') {
      res.status(402).json({
        error: 'OpenAI API quota exceeded',
        code: 'QUOTA_EXCEEDED',
        message: 'Please check your OpenAI billing and usage limits'
      });
    } else if (error.code === 'invalid_api_key') {
      res.status(401).json({
        error: 'Invalid OpenAI API key',
        code: 'INVALID_API_KEY',
        message: 'Please check your OpenAI API key configuration'
      });
    } else {
      res.status(500).json({
        error: 'Failed to generate meeting summary',
        code: 'SUMMARIZATION_ERROR',
        message: error.message
      });
    }
  }
});

// Advanced summarization endpoint with additional features
app.post('/api/summarize-meeting/advanced', async (req, res) => {
  try {
    const { transcription, sessionId, participants, options = {} } = req.body;

    if (!transcription || !transcription.trim()) {
      return res.status(400).json({ 
        error: 'Transcription is required',
        code: 'MISSING_TRANSCRIPTION'
      });
    }

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ 
        error: 'OpenAI API key not configured',
        code: 'MISSING_API_KEY'
      });
    }

    const {
      extractActionItems = true,
      extractDecisions = true,
      extractKeyTopics = true,
      includeTimestamps = false,
      summaryLength = 'medium' // short, medium, long
    } = options;

    console.log(`ü§ñ Generating advanced AI summary for session ${sessionId}`);

    // Create advanced prompt
    const prompt = `Analyze this meeting transcription and provide a detailed summary:

Session: ${sessionId}
Participants: ${participants?.join(', ') || 'Not specified'}

${transcription}

Please provide:
${extractActionItems ? '- **Action Items**: Specific tasks with assignees if mentioned' : ''}
${extractDecisions ? '- **Decisions**: Key decisions made during the meeting' : ''}
${extractKeyTopics ? '- **Key Topics**: Main discussion themes and subjects' : ''}
- **Meeting Summary**: Overall summary of discussions
- **Sentiment Analysis**: General tone and engagement level
- **Follow-up Recommendations**: Suggested next steps

Length: ${summaryLength} detail level.`;    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are an advanced meeting analysis AI. Provide detailed, structured summaries with actionable insights, sentiment analysis, and comprehensive meeting intelligence.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: summaryLength === 'long' ? 3000 : summaryLength === 'short' ? 1000 : 2000,
      temperature: 0.2,
    });

    const summary = completion.choices[0]?.message?.content;

    res.json({
      success: true,
      summary: summary,
      advanced: true,      metadata: {
        sessionId,
        participants,
        options,
        model: 'gpt-4o',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Error generating advanced meeting summary:', error);
    res.status(500).json({
      error: 'Failed to generate advanced meeting summary',
      code: 'ADVANCED_SUMMARIZATION_ERROR',
      message: error.message
    });
  }
});

// Enhanced transcription processing endpoint
app.post('/api/enhance-transcription', async (req, res) => {
  try {
    const { rawTranscription, sessionId, language = 'en' } = req.body;

    if (!rawTranscription || !rawTranscription.trim()) {
      return res.status(400).json({ 
        error: 'Raw transcription is required',
        code: 'MISSING_TRANSCRIPTION'
      });
    }

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ 
        error: 'OpenAI API key not configured',
        code: 'MISSING_API_KEY'
      });
    }    console.log(`üéôÔ∏è Enhancing transcription for session ${sessionId}`);
    console.log(`üìù Raw transcription length: ${rawTranscription.length} characters`);

    // Create the AI prompt for transcription enhancement
    const prompt = `Please enhance and clean up this meeting transcription from a planning poker session. 

Original transcription (from Web Speech API):
${rawTranscription}

Please:
1. Fix any obvious speech recognition errors and typos
2. Add proper punctuation and capitalization
3. Break into logical paragraphs or speaker segments if possible
4. Maintain the original meaning and content
5. Add time markers like [Beginning], [Middle], [End] if the conversation has clear phases
6. Identify and clean up technical terms related to software development, planning poker, story points, etc.
7. Format as clean, readable text that flows naturally

Important: Only enhance clarity and formatting - do not add content that wasn't said or change the meaning.`;

    // Call OpenAI API for transcription enhancement
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: 'You are an expert transcription editor specializing in cleaning up automated speech recognition output. Focus on accuracy, clarity, and proper formatting while preserving the original meaning and content exactly.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 2500,
      temperature: 0.1, // Very low temperature for consistency and accuracy
    });

    const enhancedTranscription = completion.choices[0]?.message?.content;

    if (!enhancedTranscription) {
      throw new Error('No enhanced transcription generated by AI');
    }

    console.log(`‚úÖ Enhanced transcription generated (${enhancedTranscription.length} characters)`);

    res.json({
      success: true,
      originalTranscription: rawTranscription,
      enhancedTranscription: enhancedTranscription,
      metadata: {
        sessionId,
        language,
        originalLength: rawTranscription.length,
        enhancedLength: enhancedTranscription.length,
        model: 'gpt-4o',
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Error enhancing transcription:', error);
    
    if (error.code === 'insufficient_quota') {
      res.status(402).json({
        error: 'OpenAI API quota exceeded',
        code: 'QUOTA_EXCEEDED',
        message: 'Please check your OpenAI billing and usage limits'
      });
    } else if (error.code === 'invalid_api_key') {
      res.status(401).json({
        error: 'Invalid OpenAI API key',
        code: 'INVALID_API_KEY',
        message: 'Please check your OpenAI API key configuration'
      });
    } else {
      res.status(500).json({
        error: 'Failed to enhance transcription',
        code: 'TRANSCRIPTION_ENHANCEMENT_ERROR',
        message: error.message
      });
    }
  }
});

// Audio transcription endpoint for system audio
app.post('/api/transcribe-audio', async (req, res) => {
  try {
    const { audioData, audioFormat, source } = req.body;

    if (!audioData) {
      return res.status(400).json({ 
        error: 'Audio data is required',
        code: 'MISSING_AUDIO_DATA'
      });
    }

    if (!process.env.OPENAI_API_KEY) {
      return res.status(500).json({ 
        error: 'OpenAI API key not configured',
        code: 'MISSING_API_KEY'
      });
    }

    console.log(`üéß Transcribing ${source || 'unknown'} audio...`);
    console.log(`üìä Audio format: ${audioFormat || 'webm'}`);

    // Convert base64 to buffer
    const audioBuffer = Buffer.from(audioData, 'base64');
    
    // Create a temporary file-like object for OpenAI
    const audioFile = {
      buffer: audioBuffer,
      name: `audio.${audioFormat || 'webm'}`,
      type: audioFormat === 'webm' ? 'audio/webm' : 'audio/wav'
    };

    console.log('ü§ñ Sending audio to OpenAI Whisper...');

    // Use OpenAI client for transcription
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    // Create a ReadableStream from the buffer
    const stream = new ReadableStream({
      start(controller) {
        controller.enqueue(audioBuffer);
        controller.close();
      }
    });

    const transcription = await openai.audio.transcriptions.create({
      file: new File([audioBuffer], audioFile.name, { type: audioFile.type }),
      model: 'whisper-1',
      language: 'en',
      response_format: 'json'
    });

    console.log('‚úÖ Audio transcription successful');
    console.log(`üìù Transcribed text: "${transcription.text?.substring(0, 100)}..."`);

    res.json({
      transcription: transcription.text || '',
      source: source || 'unknown',
      audioFormat: audioFormat || 'webm',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Audio transcription error:', error);
    
    if (error.message?.includes('API key')) {
      res.status(401).json({
        error: 'Invalid or missing OpenAI API key',
        code: 'INVALID_API_KEY',
        message: error.message
      });
    } else if (error.message?.includes('quota')) {
      res.status(429).json({
        error: 'OpenAI API quota exceeded',
        code: 'QUOTA_EXCEEDED',
        message: error.message
      });
    } else {
      res.status(500).json({
        error: 'Audio transcription failed',
        code: 'TRANSCRIPTION_ERROR',
        message: error.message
      });
    }
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Meeting Summarizer API server running on port ${PORT}`);
  console.log(`üìã Health check: http://localhost:${PORT}/api/health`);
  console.log(`ü§ñ Summarize endpoint: http://localhost:${PORT}/api/summarize-meeting`);
  console.log(`üéôÔ∏è Enhanced transcription: http://localhost:${PORT}/api/enhance-transcription`);
  console.log(`üß† AI Model: gpt-4o (Latest OpenAI model)`);
  
  if (!process.env.OPENAI_API_KEY) {
    console.warn('‚ö†Ô∏è  Warning: OPENAI_API_KEY not found in environment variables');
    console.warn('   Please set your OpenAI API key in the .env file');
  } else {
    console.log('‚úÖ OpenAI API key configured');
  }
});

export default app;
